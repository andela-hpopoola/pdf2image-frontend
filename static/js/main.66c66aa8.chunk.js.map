{"version":3,"sources":["assets/form/helper.jsx","assets/form/Input.jsx","assets/components/Header.jsx","assets/components/Alert.jsx","assets/components/Button.jsx","assets/form/validations.js","assets/helpers/api.js","assets/components/Login.jsx","assets/helpers/config.js","assets/components/Register.jsx","assets/components/Dashboard.jsx","assets/components/Logout.jsx","App.js","serviceWorker.js","index.js"],"names":["defaultOptions","valid","invalid","getValidityClass","formik","name","options","arguments","length","undefined","error","getIn","errors","touch","touched","FeedbackMessage","_ref","validMessage","className","message","react_default","a","createElement","defaultProps","Input","formGroupLabel","inputClassName","placeholder","type","isValidMessage","htmlFor","formik_esm","autoComplete","concat","id","helper_FeedbackMessage","connect","Header","children","Alert","role","Button","onClick","loading","aria-hidden","email","yup","label","required","password","strongPassword","min","confirmPassword","oneOf","loginSchema","shape","registerSchema","sendFormData","url","data","API_URL","process","Promise","resolve","reject","fetch","method","body","JSON","stringify","headers","Content-Type","then","response","ok","json","catch","Login","_useState","useState","_useState2","Object","slicedToArray","setError","_useState3","_useState4","success","setSuccess","useEffect","loginToken","session","store","token","Headers","x-auth","valid_user","navigate","components_Header","initialValues","validationSchema","onSubmit","actions","setSubmitting","render","isSubmitting","handleSubmit","components_Alert","form_Input","components_Button","es","to","Register","Dashboard","selectedFile","setSelectedFile","_useState5","_useState6","_useState7","_useState8","setLoading","_useState9","_useState10","extractedText","setExtractedText","_useState11","_useState12","conversionTool","setConversionTool","EXTRACT_PDF_TEXT_URL","event","preventDefault","FormData","append","text","split","map","line","key","react","newLineToBr","result","onChange","file","target","files","size","Logout","App","components_Login","path","components_Register","components_Dashboard","components_Logout","default","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66c66aa8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getIn } from 'formik';\n\nconst defaultOptions = {\n  valid: 'is-valid',\n  invalid: 'is-invalid'\n};\n\nexport const getValidityClass = (formik, name, options = defaultOptions) => {\n  const error = getIn(formik.errors, name);\n  const touch = getIn(formik.touched, name);\n  if (!!touch && !!error) {\n    // mark as invalid\n    return options.invalid;\n  } else if (!!touch && !error) {\n    // mark as valid\n    return options.valid;\n  }\n  return; //not touched\n};\n\nexport const FeedbackMessage = ({ formik, name, validMessage }) => {\n  const options = { valid: 'valid-feedback', invalid: 'invalid-feedback' };\n  const className = getValidityClass(formik, name, options);\n  const message = getIn(formik.errors, name) || validMessage;\n\n  return className && message ? (\n    <div className={className}>{message}</div>\n  ) : null;\n};\n\nFeedbackMessage.propTypes = {\n  formik: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  validMessage: PropTypes.string\n};\n\nFeedbackMessage.defaultProps = {\n  validMessage: ''\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'formik';\nimport { connect } from 'formik';\nimport { getValidityClass, FeedbackMessage } from 'assets/form/helper';\n\nconst Input = ({\n  formGroupLabel,\n  inputClassName,\n  name,\n  placeholder,\n  type,\n  formik,\n  isValidMessage\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{formGroupLabel} </label>\n      <Field\n        autoComplete={name}\n        className={`${getValidityClass(formik, name)} ${inputClassName}`}\n        id={name}\n        name={name}\n        placeholder={placeholder}\n        type={type}\n      />\n      <FeedbackMessage\n        formik={formik}\n        name={name}\n        validMessage={isValidMessage}\n      />\n    </div>\n  );\n};\n\nInput.defaultProps = {\n  formGroupLabel: null,\n  inputClassName: 'form-control',\n  name: null,\n  placeholder: null,\n  type: null,\n  isValidMessage: ''\n};\n\nInput.propTypes = {\n  formGroupLabel: PropTypes.string,\n  inputClassName: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  isValidMessage: PropTypes.string\n};\n\nexport default connect(Input);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ children }) => {\n  return (\n    <div className=\"text-center\">\n      <h1 className=\"logo\">\n        PDF <span>CONVERTER</span>\n      </h1>\n      <p className=\"description\">{children}</p>\n    </div>\n  );\n};\n\nconst appDescription =\n  'Instantly convert PDF documents to text or image format with this free PDF converter.';\n\nHeader.propTypes = {\n  children: PropTypes.node\n};\n\nHeader.defaultProps = {\n  children: appDescription\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Alert = ({ type, message }) => {\n  return (\n    <div className={`alert alert-${type}`} role=\"alert\">\n      {message}\n    </div>\n  );\n};\n\nAlert.propTypes = {\n  type: PropTypes.string,\n  message: PropTypes.string.isRequired\n};\n\nAlert.defaultProps = {\n  type: 'danger'\n};\n\nexport default Alert;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ type, onClick, loading, className, children }) => (\n  <button type={type} className={`btn ${className}`} onClick={onClick}>\n    {loading && (\n      <span\n        className=\"spinner-border spinner-border-sm mr-2\"\n        role=\"status\"\n        aria-hidden=\"true\"\n      />\n    )}\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  type: PropTypes.string,\n  children: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n  className: PropTypes.string\n};\n\nButton.defaultProps = {\n  type: 'submit',\n  loading: false,\n  className: ''\n};\n\nexport default Button;\n","import * as yup from 'yup';\n\nconst email = yup\n  .string()\n  .label('Email')\n  .email()\n  .required();\n\nconst password = yup\n  .string()\n  .label('Password')\n  .required('Password is required');\n\nconst strongPassword = password.min(6, 'Seems a bit short...');\n\nconst confirmPassword = yup\n  .string()\n  .label('Confirm Password')\n  .oneOf([yup.ref('password')], 'Passwords must match');\n\nconst loginSchema = yup.object().shape({\n  email,\n  password\n});\n\nconst registerSchema = yup.object().shape({\n  email,\n  password: strongPassword,\n  confirmPassword\n});\nexport { loginSchema, registerSchema };\n","const AUTH_SERVICES_API = process.env.REACT_APP_AUTH_SERVICES;\nexport const sendFormData = (url, data) => {\n  const API_URL = AUTH_SERVICES_API + url;\n  return new Promise((resolve, reject) => {\n    fetch(API_URL, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => {\n        if (response.ok) {\n          response.json().then(data => resolve(data));\n        } else {\n          reject('Invalid username or password');\n        }\n      })\n      .catch(error => {\n        reject(error.message);\n      });\n  });\n};\n\nexport const getAuthStatus = loginToken => {\n  return new Promise((resolve, reject) => {\n    if (!loginToken) {\n      reject();\n    }\n    fetch(`${AUTH_SERVICES_API}/authenticate`, {\n      headers: new Headers({\n        'x-auth': loginToken\n      })\n    })\n      .then(response => response.json())\n      .then(data => resolve(data))\n      .catch(() => reject());\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport Input from 'assets/form/Input';\nimport store from 'store2';\nimport Header from 'assets/components/Header';\nimport Alert from 'assets/components/Alert';\nimport Button from 'assets/components/Button';\nimport { Formik, Form } from 'formik';\nimport { Link, navigate } from '@reach/router';\nimport { loginSchema } from 'assets/form/validations';\nimport { sendFormData, getAuthStatus } from 'assets/helpers/api';\nimport { AUTH_STORE_KEY } from 'assets/helpers/config';\n\nconst Login = () => {\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    const session = store(AUTH_STORE_KEY);\n    session &&\n      getAuthStatus(session.token).then(\n        data => data.valid_user && navigate('/dashboard')\n      );\n    success && navigate('/dashboard');\n  }, [success]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <div className=\"login-container\">\n          <Header />\n          <Formik\n            initialValues={{ email: 'demo@email.com', password: 'password1' }}\n            validationSchema={loginSchema}\n            onSubmit={(data, actions) => {\n              sendFormData('/login', data)\n                .then(data => {\n                  store(AUTH_STORE_KEY, data);\n                  setSuccess(true);\n                  actions.setSubmitting(false);\n                })\n                .catch(error => {\n                  setError(error);\n                  actions.setSubmitting(false);\n                });\n            }}\n            render={({ isSubmitting, handleSubmit }) => (\n              <Form className=\"pt-5\">\n                <h4 className=\"login-text\">Log into your Account</h4>\n                {error && <Alert message={error} />}\n                <Input\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email Address\"\n                  formGroupLabel=\"Email\"\n                />\n                <Input\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  formGroupLabel=\"Password\"\n                />\n                <Button\n                  className=\"btn-danger\"\n                  onClick={handleSubmit}\n                  loading={isSubmitting}\n                >\n                  Sign in\n                </Button>\n              </Form>\n            )}\n          />\n          <div className=\"text-center text-small pt-5\">\n            Dont have an account? <Link to=\"/register\">Sign up now</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","export const AUTH_STORE_KEY = 'pdf2convert_auth';\n","import React, { useState, useEffect } from 'react';\nimport Input from 'assets/form/Input';\nimport store from 'store2';\nimport Header from 'assets/components/Header';\nimport Alert from 'assets/components/Alert';\nimport Button from 'assets/components/Button';\nimport { Formik, Form } from 'formik';\nimport { Link, navigate } from '@reach/router';\nimport { registerSchema } from 'assets/form/validations';\nimport { sendFormData } from 'assets/helpers/api';\nimport { AUTH_STORE_KEY } from 'assets/helpers/config';\n\nconst Register = () => {\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    success && navigate('/dashboard');\n  }, [success]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <div className=\"login-container\">\n          <Header />\n          <Formik\n            initialValues={{\n              email: 'demo@testing.com',\n              password: '',\n              confirmPassword: ''\n            }}\n            validationSchema={registerSchema}\n            onSubmit={(data, actions) => {\n              sendFormData('/register', data)\n                .then(() => {\n                  store(AUTH_STORE_KEY, data);\n                  setSuccess(true);\n                  actions.setSubmitting(false);\n                })\n                .catch(error => {\n                  setError(error.message);\n                  actions.setSubmitting(false);\n                });\n            }}\n            render={({ isSubmitting, handleSubmit }) => (\n              <Form className=\"pt-5\">\n                <h4 className=\"login-text\">Register a new Account</h4>\n                {error && <Alert message={error} />}\n                <Input\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email Address\"\n                  formGroupLabel=\"Email\"\n                  isValidMessage=\"Awesowe, you entered a valid email address\"\n                />\n                <Input\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  formGroupLabel=\"Password\"\n                  isValidMessage=\"Awesome, your password is strong\"\n                />\n                <Input\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"Confirm Password\"\n                  formGroupLabel=\"Confirm Password\"\n                />\n                <Button\n                  className=\"btn-danger\"\n                  onClick={handleSubmit}\n                  loading={isSubmitting}\n                >\n                  Register\n                </Button>\n              </Form>\n            )}\n          />\n          <div className=\"text-center text-small pt-5\">\n            Have an account? <Link to=\"/\">Sign in now</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport store from 'store2';\nimport Header from 'assets/components/Header';\nimport Alert from 'assets/components/Alert';\nimport Button from 'assets/components/Button';\nimport { navigate, Link } from '@reach/router';\nimport { AUTH_STORE_KEY } from 'assets/helpers/config';\n\nconst Dashboard = () => {\n  const MAX_PDF_SIZE = 1000000; //1MB\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [extractedText, setExtractedText] = useState(null);\n  const [conversionTool, setConversionTool] = useState(false);\n\n  const EXTRACT_PDF_TEXT_URL = `${\n    process.env.REACT_APP_PDF_SERVICES\n  }/extract-text`;\n\n  const session = store(AUTH_STORE_KEY);\n\n  useEffect(() => {\n    !session && navigate('/');\n  }, [session]);\n\n  const onChangeHandler = event => {\n    setConversionTool(false);\n    const file = event.target.files[0];\n    if (file.size > MAX_PDF_SIZE) {\n      setError('Uploaded PDF should be less than 1MB');\n    } else if (file.type !== 'application/pdf') {\n      setError('Uploaded file must be a valid PDF');\n    } else {\n      setSelectedFile(file);\n      setConversionTool(true);\n    }\n  };\n\n  const newLineToBr = (text = '') => {\n    return text.split('\\n').map((line, key) => (\n      <Fragment key={key}>\n        {line}\n        <br />\n      </Fragment>\n    ));\n  };\n\n  const uploadNewPdf = () => {\n    setSuccess(false);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSuccess(false);\n    setLoading(true);\n    const data = new FormData();\n    data.append('pdf', selectedFile);\n    fetch(EXTRACT_PDF_TEXT_URL, {\n      method: 'POST',\n      headers: new Headers({\n        'x-auth': session.token\n      }),\n      body: data\n    })\n      .then(response => {\n        response.json().then(data => {\n          const text = newLineToBr(data.result);\n          setExtractedText(text);\n          setConversionTool(false);\n          setSuccess(true);\n          setLoading(false);\n        });\n      })\n      .catch(error => {\n        setError(error.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <div className=\"dashboard-container\">\n          <Header>\n            <Fragment>\n              {`You are logged in as ${session.email}`}{' '}\n              <Link className=\"text-center\" to=\"/logout\">\n                (Logout)\n              </Link>\n            </Fragment>\n          </Header>\n\n          <div className=\"container pt-3\">\n            <form onSubmit={handleSubmit}>\n              {error && <Alert message={error} />}\n              {success && (\n                <Fragment>\n                  <Alert\n                    type=\"success\"\n                    message=\"Your file has been successfully converted\"\n                  />\n                  <button className=\"btn btn-danger\" onClick={uploadNewPdf}>\n                    Upload another PDF\n                  </button>\n                </Fragment>\n              )}\n\n              {success ||\n                (conversionTool ? (\n                  <div className=\"conversion-tool\">\n                    <h3>{selectedFile && selectedFile.name}</h3>\n                    <div className=\"pt-3\">\n                      <Button\n                        type=\"button\"\n                        className=\"btn-info\"\n                        onClick={handleSubmit}\n                        loading={loading}\n                      >\n                        Convert to Text\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"form-group files\">\n                    <input\n                      type=\"file\"\n                      className=\"form-control\"\n                      onChange={onChangeHandler}\n                    />\n                  </div>\n                ))}\n            </form>\n          </div>\n\n          {success && <div className=\"container\">{extractedText}</div>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useEffect } from 'react';\nimport store from 'store2';\nimport { navigate } from '@reach/router';\n\nconst Logout = () => {\n  useEffect(() => {\n    store(false);\n    navigate('/');\n  });\n\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <div className=\"login-container\">Logging you out</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Logout;\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport Login from 'assets/components/Login';\nimport Register from 'assets/components/Register';\nimport Dashboard from 'assets/components/Dashboard';\nimport Logout from 'assets/components/Logout';\nimport 'assets/sass/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Login path=\"/\" />\n        <Register path=\"register\" />\n        <Dashboard path=\"dashboard\" />\n        <Logout path=\"logout\" />\n        <Login default />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}